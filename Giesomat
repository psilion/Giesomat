const int moistureGPIO = 35;
int GPIOOUT = 17;
int moistureValue = 0;

int vielGiessen = 10;
int mittelGiessen = 5;
int wenigGiessen = 1;
#define TIME_TO_SLEEP  10        /* Time ESP32 will go to sleep (in seconds) */
#define uS_TO_S_FACTOR 1000000ULL  /* Conversion factor for micro seconds to seconds */
#include <esp_deep_sleep.h>    

RTC_DATA_ATTR int bootCount = 0;
/*
Method to print the reason by which ESP32
has been awaken from sleep
*/

void print_wakeup_reason(){
  esp_deep_sleep_wakeup_cause_t wakeup_reason;

  wakeup_reason = esp_deep_sleep_get_wakeup_cause();

  switch(wakeup_reason)
  {
    case 1  : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case 2  : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case 3  : Serial.println("Wakeup caused by timer"); break;
    case 4  : Serial.println("Wakeup caused by touchpad"); break;
    case 5  : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.println("Wakeup was not caused by deep sleep"); break;
  }
}

void giessen(int seconds)
{
  digitalWrite(GPIOOUT, LOW);
  Serial.println("Gießen");
  delay(seconds*1000);
  digitalWrite(GPIOOUT, HIGH);
  Serial.print("Gießen beendet.");
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  //Increment boot number and print it every reboot
  ++bootCount;
  Serial.println("Boot number: " + String(bootCount));
  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  esp_deep_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);
  Serial.println("Setup ESP32 to sleep for every " + String(TIME_TO_SLEEP) +  " Seconds");
  
  pinMode (GPIOOUT, OUTPUT);
  digitalWrite(GPIOOUT, HIGH);
  
  

  moistureValue = analogRead(moistureGPIO);
  Serial.print("Feuchtigkeit: ");
  Serial.println(moistureValue);
    if (moistureValue > 2800){
      Serial.println("Sehr trocken, viel Gießen notwendig: ");
      Serial.println(moistureValue);
      giessen(vielGiessen);
      }else if (moistureValue <=2800 && moistureValue > 2000){
      Serial.print("Trocken, mäßig Gießen notwendig: ");
      Serial.println(moistureValue);
      giessen(mittelGiessen);
      }else if (moistureValue <= 2000 && moistureValue > 1700){
      Serial.print("Feucht, sehr wenig Gießen notwendig: ");
      Serial.println(moistureValue);
      giessen(wenigGiessen);
      }else {
      Serial.print("Sehr feucht, kein Gießen notwendig: ");
      Serial.println(moistureValue);}
  
  
  
  
  Serial.println("Going to sleep now");
  delay(1000);
  esp_deep_sleep_start();
  Serial.println("This will never be printed");
}

void loop() {}
